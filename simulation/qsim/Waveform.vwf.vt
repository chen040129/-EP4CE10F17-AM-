// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2024 18:20:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] AD9226_data;
reg [7:0] AD9481_data;
reg CLK;
reg RST_n;
// wires                                               
wire [7:0] AD9226_data_normal;
wire [15:0] AM_out;
wire CLK_65M;
wire CLK_250M;
wire PDN;
wire [15:0] sin_out;

// assign statements (if any)                          
AM i1 (
// port map - connection between master ports and signals/registers   
	.AD9226_data(AD9226_data),
	.AD9226_data_normal(AD9226_data_normal),
	.AD9481_data(AD9481_data),
	.AM_out(AM_out),
	.CLK(CLK),
	.CLK_65M(CLK_65M),
	.CLK_250M(CLK_250M),
	.PDN(PDN),
	.RST_n(RST_n),
	.sin_out(sin_out)
);
initial 
begin 
#1000000 $finish;
end 
// AD9226_data[ 11 ]
initial
begin
	AD9226_data[11] = 1'b0;
end 
// AD9226_data[ 10 ]
initial
begin
	AD9226_data[10] = 1'b0;
end 
// AD9226_data[ 9 ]
initial
begin
	AD9226_data[9] = 1'b0;
end 
// AD9226_data[ 8 ]
initial
begin
	AD9226_data[8] = 1'b0;
end 
// AD9226_data[ 7 ]
initial
begin
	AD9226_data[7] = 1'b0;
end 
// AD9226_data[ 6 ]
initial
begin
	AD9226_data[6] = 1'b0;
end 
// AD9226_data[ 5 ]
initial
begin
	AD9226_data[5] = 1'b0;
end 
// AD9226_data[ 4 ]
initial
begin
	AD9226_data[4] = 1'b0;
end 
// AD9226_data[ 3 ]
initial
begin
	AD9226_data[3] = 1'b0;
end 
// AD9226_data[ 2 ]
initial
begin
	AD9226_data[2] = 1'b0;
end 
// AD9226_data[ 1 ]
initial
begin
	AD9226_data[1] = 1'b0;
end 
// AD9226_data[ 0 ]
initial
begin
	AD9226_data[0] = 1'b0;
end 
// AD9481_data[ 7 ]
initial
begin
	AD9481_data[7] = 1'b0;
end 
// AD9481_data[ 6 ]
initial
begin
	AD9481_data[6] = 1'b0;
end 
// AD9481_data[ 5 ]
initial
begin
	AD9481_data[5] = 1'b0;
end 
// AD9481_data[ 4 ]
initial
begin
	AD9481_data[4] = 1'b0;
end 
// AD9481_data[ 3 ]
initial
begin
	AD9481_data[3] = 1'b0;
end 
// AD9481_data[ 2 ]
initial
begin
	AD9481_data[2] = 1'b0;
end 
// AD9481_data[ 1 ]
initial
begin
	AD9481_data[1] = 1'b0;
end 
// AD9481_data[ 0 ]
initial
begin
	AD9481_data[0] = 1'b0;
end 

// RST_n
initial
begin
	RST_n = 1'b0;
	RST_n = #80000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 
endmodule

